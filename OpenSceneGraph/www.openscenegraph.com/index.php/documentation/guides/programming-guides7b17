<?xml version="1.0" encoding="utf-8"?>
<!-- generator="Joomla! - Open Source Content Management" -->
<feed xmlns="http://www.w3.org/2005/Atom"  xml:lang="en-gb">
	<title type="text">Programming Guides</title>
	<subtitle type="text">Project website for OpenSceneGraph</subtitle>
	<link rel="alternate" type="text/html" href="https://www.openscenegraph.com"/>
	<id>https://www.openscenegraph.com/index.php/documentation/guides/programming-guides</id>
	<updated>2024-01-19T15:00:46+00:00</updated>
	<author>
		<name>OpenSceneGraph</name>
		<email>robert@openscenegraph.com</email>
	</author>
	<generator uri="https://www.joomla.org">Joomla! - Open Source Content Management</generator>
	<link rel="self" type="application/atom+xml" href="https://www.openscenegraph.com/index.php/documentation/guides/programming-guides?format=feed&amp;type=atom"/>
	<entry>
		<title>osgFX</title>
		<link rel="alternate" type="text/html" href="https://www.openscenegraph.com/index.php/documentation/guides/programming-guides/123-osgfx"/>
		<published>2013-02-28T19:02:45+00:00</published>
		<updated>2013-02-28T19:02:45+00:00</updated>
		<id>https://www.openscenegraph.com/index.php/documentation/guides/programming-guides/123-osgfx</id>
		<author>
			<name>Marco Jez</name>
			<email>jtorresfabra@gmail.com</email>
		</author>
		<summary type="html">&lt;p&gt;This is a brief and informal introduction for users and developers.&lt;/p&gt;
&lt;p&gt;osgFX is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An add-on library for OpenSceneGraph&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;A framework for implementing consistent, self-contained, reusable effects that can be applied to OSG nodes&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;A (small) set of predefined special effects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Follow the next link to learn more &lt;a href=&quot;http://www.openscenegraph.org/documentation/osgFX/osgFX_presentation.pdf&quot;&gt;http://www.openscenegraph.org/documentation/osgFX/osgFX_presentation.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;</summary>
		<content type="html">&lt;p&gt;This is a brief and informal introduction for users and developers.&lt;/p&gt;
&lt;p&gt;osgFX is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An add-on library for OpenSceneGraph&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;A framework for implementing consistent, self-contained, reusable effects that can be applied to OSG nodes&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;A (small) set of predefined special effects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Follow the next link to learn more &lt;a href=&quot;http://www.openscenegraph.org/documentation/osgFX/osgFX_presentation.pdf&quot;&gt;http://www.openscenegraph.org/documentation/osgFX/osgFX_presentation.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;</content>
		<category term="Programming Guides" />
	</entry>
	<entry>
		<title>Shadows</title>
		<link rel="alternate" type="text/html" href="https://www.openscenegraph.com/index.php/documentation/guides/programming-guides/108-shadows"/>
		<published>2013-02-06T02:36:39+00:00</published>
		<updated>2013-02-06T02:36:39+00:00</updated>
		<id>https://www.openscenegraph.com/index.php/documentation/guides/programming-guides/108-shadows</id>
		<author>
			<name>openscenegraph</name>
			<email>jtorresfabra@gmail.com</email>
		</author>
		<summary type="html">&lt;div class=&quot;wikipage searchable&quot;&gt;
&lt;p&gt;The osgShadow nodekit is a powerful collection of classes for adding shadows to your scene. Thanks to this powerful nodekit, you don't need to learn the complex calculations, multi-texturing units and programmable shaders involved in creating shadows. Just add these nodes to your scene graph, and the work is done for you.&lt;/p&gt;
&lt;p&gt;The c&lt;span class=&quot;ext-link&quot;&gt;&lt;span class=&quot;icon&quot;&gt;lass documentation for osgShadow&lt;/span&gt;&lt;/span&gt; shows the classes and methods. This document describes how to use them.&lt;/p&gt;
&lt;h2 id=&quot;SimpleCase&quot;&gt;Simple Case&lt;/h2&gt;
&lt;p&gt;In the simplest case, there is a single light enabled in your scene. You create a &lt;strong&gt;&lt;span class=&quot;missing wiki&quot;&gt;ShadowedScene&lt;/span&gt;&lt;/strong&gt; node (a subclass of osg::Group), and add children to it. A &lt;strong&gt;&lt;span class=&quot;missing wiki&quot;&gt;ShadowTechnique&lt;/span&gt;&lt;/strong&gt; is chosen and assigned to the ShadowedScene. The children of ShadowedScene can have the &lt;strong&gt;&lt;span class=&quot;missing wiki&quot;&gt;CastsShadow&lt;/span&gt;&lt;/strong&gt; bit set in their node mask, and/or the &lt;strong&gt;&lt;span class=&quot;missing wiki&quot;&gt;ReceivesShadow&lt;/span&gt;&lt;/strong&gt; bit. As the scene is rendered, ShadowedScene calls the methods of its ShadowTechnique to compute the shadows and decorate the scene graph with StateSets to render them:&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.openscenegraph.com/images/community/shadows1.png&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&quot;TheTechniques&quot;&gt;The Techniques&lt;/h2&gt;
&lt;p&gt;As of OSG 2.4, there are five different shadow techniques available. All of them have varying requirements on the capabilities of your 3D card. If your card's shader engine and driver does not support certain commands, then it will not be capable of using some of these techniques.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;span class=&quot;missing wiki&quot;&gt;ShadowMap&lt;/span&gt;&lt;/strong&gt;.
&lt;ul&gt;
&lt;li&gt;This is the most frequently used option and most mature and stable implementation.&lt;/li&gt;
&lt;li&gt;It uses a fragment shader (osg::Shader).&lt;/li&gt;
&lt;li&gt;It basically does a render to texture from the light source's point of view (which is the so-called shadow map) and then, when rendering the final scene, checks the fragment's depth against the shadow map to decide whether it is in shadow or not. It works whether you have shader support or not, but the shadows will be opaque black when using the fixed pipeline (ATI cards have an extension to control this, but it is not standard). Also, some older cards have very poor render-to-texture performance (whether FBO or pbuffer) so you should turn off shadows completely in that case.&lt;/li&gt;
&lt;li&gt;Option AmbientBias, see below.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;span class=&quot;missing wiki&quot;&gt;ShadowVolume&lt;/span&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;As of OSG 2.4, this is still experimental and may not produce shadows on some graphics cards. (JSG - in fact, I have not seen it work correctly at all, there are always inverted shadows where two shadows overlap)&lt;/li&gt;
&lt;li&gt;This technique does not use either texturing or shaders. It does make heavy use of stencils.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;span class=&quot;missing wiki&quot;&gt;ShadowTexture&lt;/span&gt;&lt;/strong&gt;.
&lt;ul&gt;
&lt;li&gt;This is the simplest technique. It does not use a shader.&lt;/li&gt;
&lt;li&gt;It's fixed-function only, so it should run on anything that supports RTT through either FBOs or pbuffers (so almost anything). One users reports: &quot;On my hardware (ATI mobility X300), only ShadowTexture works&quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;span class=&quot;missing wiki&quot;&gt;SoftShadowMap&lt;/span&gt;&lt;/strong&gt;.
&lt;ul&gt;
&lt;li&gt;As of OSG 2.4, this is still experimental and may not produce shadows on some graphics cards.&lt;/li&gt;
&lt;li&gt;It has quite complex shaders.&lt;/li&gt;
&lt;li&gt;The original idea for this technique was published in &lt;a class=&quot;ext-link&quot; href=&quot;http://developer.nvidia.com/object/gpu_gems_2_home.html&quot;&gt;&lt;span class=&quot;icon&quot;&gt;GPU Gems 2&lt;/span&gt;&lt;/a&gt; presumably the article &quot;Efficient Soft-Edged Shadows Using Pixel Shader Branching&quot;.&lt;/li&gt;
&lt;li&gt;Option AmbientBias, see below.&lt;/li&gt;
&lt;li&gt;Options Bias, SoftnessWidth, and JitteringScale are documented in the API docs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;span class=&quot;missing wiki&quot;&gt;ParallelSplitShadowMap&lt;/span&gt;&lt;/strong&gt;.
&lt;ul&gt;
&lt;li&gt;The idea for this technique is based on &lt;span class=&quot;ext-link&quot;&gt;&lt;span class=&quot;icon&quot;&gt;Parallel-split shadow maps for large-scale virtual environments&lt;/span&gt;&lt;/span&gt; or GPU Gems 3 / Chapter 10 &lt;a class=&quot;ext-link&quot; href=&quot;http://my.safaribooksonline.com/9780321545428/ch10&quot;&gt;&lt;span class=&quot;icon&quot;&gt;preview &lt;/span&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Instead of one single texture and it's discretisation bugs, this technique tries to reduce small shadow artifacts with upto 7 textures. Each shadow texture (depth map) has a camera distance range, in with the depth map will be active. In the active range, the shadow will be calculated based on the correct depth map. By default we assume that close points (near to the camera) should be more robust , less artefacts compared to far points. So we will split not linearly the viewing frustum. This technique should be quite similar to the Lispsm or view shadow map, if we use only one texture.&lt;/li&gt;
&lt;li&gt;This is the most complex and potentially powerful algorithm, with many more options that can be set:&lt;/li&gt;
&lt;li&gt;PolygonOffset&lt;/li&gt;
&lt;li&gt;MaxFarDistance : to reduce the shadowing artefacts and increase the frame rate you could define the range from camera to the distance where the shadow should disappear&lt;/li&gt;
&lt;li&gt;MoveVCamBehindRCamFactor : if you have need objects casting shadows behind the camera, may this option will solve some problems: it moves the camera virtually behind the real camera&lt;/li&gt;
&lt;li&gt;MinNearDistanceForSplits : put the light camera closer to scene (frustum split)&lt;/li&gt;
&lt;li&gt;forceFrontCullFace : activate front culling&lt;/li&gt;
&lt;li&gt;useLinearSplit : by default the splits are located non-linear, if you set the flag you will get linear distances between the textures, starting at the camera position to the farest frustum point&lt;/li&gt;
&lt;li&gt;If filtering is enabled (by default set) and GLSL is supported then the PSSM will filter the shadow with a 3x3 filter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;There is a method to activate a debug mode: It will display the active range of each texture (r=1,g=2,b=3,...)&lt;/li&gt;
&lt;li&gt;It still has some problems and will need some work before being production-ready.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Light space perspective shadow maps (Lispsm)&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To summarize:&lt;/p&gt;
&lt;table class=&quot;withborder&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Method&lt;/td&gt;
&lt;td&gt;uses textures&lt;/td&gt;
&lt;td&gt;uses osg::Shader&lt;/td&gt;
&lt;td&gt;respects CastsShadow&lt;/td&gt;
&lt;td&gt;respects ReceivesShadow&lt;/td&gt;
&lt;td&gt;notes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ShadowMap&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;Can work fixed-function too without any changes, just call clearShaderList() after init() but before first frame&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ShadowVolume&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;no?&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ShadowTexture&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;Can't do self-shadowing, so setting a node's CastsShadow bit means that node won't receive shadows.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SoftShadowMap&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ParallelSplitShadowMap&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;Filter3x3implementedinPSSM&quot;&gt;Filter 3x3 implemented in PSSM&lt;/h2&gt;
&lt;p&gt;Filter 3x3 Matrix:&lt;/p&gt;
&lt;table class=&quot;withborder&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Filter divisor: 6.0&lt;/p&gt;
&lt;table class=&quot;withborder&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;original&lt;/td&gt;
&lt;td&gt;filtered&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://www.openscenegraph.com/images/test.png&quot; border=&quot;0&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;https://www.openscenegraph.com/images/community/test_3x3.png&quot; border=&quot;0&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;AmbientBias&quot;&gt;Ambient Bias&lt;/h3&gt;
&lt;p&gt;The AmbientBias option on ShadowMap and SoftShadowMap is used to define how much shadows darken the scene. Its usually used to set up lower bound for shadowing factor, in the range [0..1]. If such shadow factor was used directly, shadowed areas would be completely black. Sometimes we want to make them to be only a bit darker than lit areas. By setting AmbientBias.x to some value from range 0..1 one limits minimal shadow value (hence AmbientBias because shadowed areas are lit only by ambient component). AmbientBias.y is usually set up to 1 - AmbientBias.x but it may be also set bit larger or smaller values used to make shadow range more dynamic or flat.&lt;/p&gt;
&lt;h3 id=&quot;TextureResolution&quot;&gt;Texture Resolution&lt;/h3&gt;
&lt;p&gt;Generally speaking, a projected texture is used to render the shadow. This means that if your shadow casting geometry is very large, then the texture resolution must be spread over a large area. This can produce blocky aliasing in the shadow. Therefore, it is advisable to keep the bounding sphere of your shadow casting geometry as small as possible. Just placing a ShadowedScene above a large scene graph, where everything casts a shadow, is not likely to produce good results. You should very deliberately choose which nodes will cast shadows.&lt;/p&gt;
&lt;p&gt;You can also increase the resolution of the texture with the &lt;span class=&quot;missing wiki&quot;&gt;ShadowTechnique&lt;/span&gt;'s &lt;em&gt;setTextureResolution&lt;/em&gt; method, but this is not a long term solution but rather just hides the problem. More advanced shadow techniques like PSSM (Parallel-Split Shadow Maps) or LiSPSM (Light-Space Perspective Shadow Maps) can help in those cases. (note: for now only PSSM is integrated into osgShadow and it does not work in all cases).&lt;/p&gt;
&lt;h2 id=&quot;ExampleCode&quot;&gt;Example Code&lt;/h2&gt;
&lt;p&gt;This code loads two cessnas, offset from each other. The first cessna casts a shadow on the second. In fact, because ShadowMap treats everything as shadowed, the first cessna also self-shadows.&lt;/p&gt;
&lt;pre&gt;  const int ReceivesShadowTraversalMask = 0x1;
  const int CastsShadowTraversalMask = 0x2;
  osg::ref_ptr shadowedScene = new osgShadow::ShadowedScene;

  shadowedScene-&amp;gt;setReceivesShadowTraversalMask(ReceivesShadowTraversalMask);
  shadowedScene-&amp;gt;setCastsShadowTraversalMask(CastsShadowTraversalMask);

  osg::ref_ptr sm = new osgShadow::ShadowMap;
  shadowedScene-&amp;gt;setShadowTechnique(sm.get());

  int mapres = 1024;
  sm-&amp;gt;setTextureSize(osg::Vec2s(mapres,mapres));

  osg::Group* cessna1 = (osg::Group*) osgDB::readNodeFile(&quot;cessna.osg&quot;);
  cessna1-&amp;gt;getChild(0)-&amp;gt;setNodeMask(CastsShadowTraversalMask);

  osg::Group* cessna2 = (osg::Group*) osgDB::readNodeFile(&quot;cessna.osg&quot;);
  cessna2-&amp;gt;getChild(0)-&amp;gt;setNodeMask(ReceivesShadowTraversalMask);

  osg::MatrixTransform* positioned = new osg::MatrixTransform;
  positioned-&amp;gt;setMatrix(osg::Matrix::translate(40,0,0));
  positioned-&amp;gt;addChild(cessna1);

  shadowedScene-&amp;gt;addChild(positioned);
  shadowedScene-&amp;gt;addChild(cessna2);
&lt;/pre&gt;
&lt;h2 id=&quot;CastsShadowandReceivesShadow&quot;&gt;CastsShadow and ReceivesShadow&lt;/h2&gt;
&lt;p&gt;The two ShadowedScene masks are there to help the ShadowTechnique implementations differentiate where appropriate between different types of objects in the scene - with some techniques like ShadowTexture this is essential, with others it doesn't make so much sense and actually can be rather awkward to implement. osgShadow library itself is also still quite young with the various implementations still not fully ground out, so some areas that they don't currently implement fully will hopefully be filled out in the future.&lt;/p&gt;
&lt;p&gt;For example, with OSG 2.4, ShadowMap respects the CastsShadow bit (only objects with that bit will casts a shadow) but ignores the ReceivesShadow bit (all objects in the shadow scene graph receive shadows - there are technical reasons for this).&lt;/p&gt;
&lt;p&gt;Keep in mind that the default node mask in OSG has all bits set: 0xffffffff. This means that every node under a ShadowedScene is set to both case and receive shadows, by default, unless you tell it otherwise. You should be careful when inserting a ShadowedScene into an existing application's scenegraph, as you might have a lot more objects casting shadows than you need, which can spread the shadow resolution very roughly. To solve the problem, disable casting by turning off the bit:&lt;/p&gt;
&lt;div class=&quot;code&quot;&gt;node-&amp;gt;setNodeMask(node-&amp;gt;getNodeMask() &amp;amp; ~CastsShadowTraversalMask);&lt;/div&gt;
&lt;h2 id=&quot;CommonQuestions&quot;&gt;Common Questions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Where in the scene graph does ShadowedScene go? Does it have to be at the root?
&lt;ul&gt;
&lt;li&gt;You can put your ShadowedScene node anywhere in the scene graph.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;What if the shadower and shadowed nodes are far apart in the scene graph, should the ShadowedScene be inserted above their mutual parent?
&lt;ul&gt;
&lt;li&gt;Yes. The root node of the subgraph which you want to have shadows should be an osgShadow::ShadowedScene&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Do the ReceivesShadow and CastsShadow mask bits need to be set to 0 for all the other nodes in the tree under ShadowedScene, to omit them from the shadow computation?
&lt;ul&gt;
&lt;li&gt;Yes. You will have to iterate through the entire scene graph to change the node mask for every node from its default (0xffffffff) to turn those bits off (use ~&lt;span class=&quot;ext-link&quot;&gt;&lt;span class=&quot;icon&quot;&gt;shadowedScene-&amp;gt;getCastsShadowTraversalMask()&lt;/span&gt;&lt;/span&gt; and ~&lt;span class=&quot;ext-link&quot;&gt;&lt;span class=&quot;icon&quot;&gt;getReceivesShadowTraversalMask()&lt;/span&gt;&lt;/span&gt; to toggle the right bits off - the tilde means logical NOT). However, remember that some shadow techniques will ignore some bits in some cases, so you may not be able to omit nodes in all cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Does the Light need to be present in the graph under the ShadowedScene?
&lt;ul&gt;
&lt;li&gt;No, you don't need to add light to shadowed scene nor it does not need to be present in fixed location in viewer scene hierarchy. In case of many lights, it would be helpful if you point out the Light source that must be used to generate shadows. See !ShadowMap::setLight function.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Does ShadowedScene always rerender the shadow every frame?
&lt;ul&gt;
&lt;li&gt;Yes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;If I know that the light and geometry are not moving, can I avoid the shadows being constantly re-rendered?
&lt;ul&gt;
&lt;li&gt;Possibly. See the mailing list thread &lt;span class=&quot;ext-link&quot;&gt;&lt;span class=&quot;icon&quot;&gt;osgShadow one shot shadow map&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;What if my objects already have a shader applied to them?
&lt;ul&gt;
&lt;li&gt;That shader also needs to implement shadow mapping. See &lt;a href=&quot;http://www.openscenegraph.org/projects/osg/browser/OpenSceneGraph/trunk/src/osgShadow/ShadowMap.cpp&quot;&gt;the top of src/osgShadow/ShadowMap.cpp&lt;/a&gt; for the basic shader, and use that in your shader (keep the same names for the variables too).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Can osgShadow be combined with osg::Fog?
&lt;ul&gt;
&lt;li&gt;Most of the ShadowTechniques use shaders. osg::Fog wraps up glFog, which is part of OpenGL's fixed pipeline. As soon as you enable shaders you lose the fixed pipeline functionality for that stage (vertex and/or fragment) and must implement the features you want yourself in the shader.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Exampleosgshadow&quot;&gt;Example osgshadow&lt;/h2&gt;
&lt;p&gt;The OSG examples include an application called osgshadow, which gives a very simple demonstration of how to call the osgShadow nodekit.&lt;/p&gt;
&lt;/div&gt;</summary>
		<content type="html">&lt;div class=&quot;wikipage searchable&quot;&gt;
&lt;p&gt;The osgShadow nodekit is a powerful collection of classes for adding shadows to your scene. Thanks to this powerful nodekit, you don't need to learn the complex calculations, multi-texturing units and programmable shaders involved in creating shadows. Just add these nodes to your scene graph, and the work is done for you.&lt;/p&gt;
&lt;p&gt;The c&lt;span class=&quot;ext-link&quot;&gt;&lt;span class=&quot;icon&quot;&gt;lass documentation for osgShadow&lt;/span&gt;&lt;/span&gt; shows the classes and methods. This document describes how to use them.&lt;/p&gt;
&lt;h2 id=&quot;SimpleCase&quot;&gt;Simple Case&lt;/h2&gt;
&lt;p&gt;In the simplest case, there is a single light enabled in your scene. You create a &lt;strong&gt;&lt;span class=&quot;missing wiki&quot;&gt;ShadowedScene&lt;/span&gt;&lt;/strong&gt; node (a subclass of osg::Group), and add children to it. A &lt;strong&gt;&lt;span class=&quot;missing wiki&quot;&gt;ShadowTechnique&lt;/span&gt;&lt;/strong&gt; is chosen and assigned to the ShadowedScene. The children of ShadowedScene can have the &lt;strong&gt;&lt;span class=&quot;missing wiki&quot;&gt;CastsShadow&lt;/span&gt;&lt;/strong&gt; bit set in their node mask, and/or the &lt;strong&gt;&lt;span class=&quot;missing wiki&quot;&gt;ReceivesShadow&lt;/span&gt;&lt;/strong&gt; bit. As the scene is rendered, ShadowedScene calls the methods of its ShadowTechnique to compute the shadows and decorate the scene graph with StateSets to render them:&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.openscenegraph.com/images/community/shadows1.png&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&quot;TheTechniques&quot;&gt;The Techniques&lt;/h2&gt;
&lt;p&gt;As of OSG 2.4, there are five different shadow techniques available. All of them have varying requirements on the capabilities of your 3D card. If your card's shader engine and driver does not support certain commands, then it will not be capable of using some of these techniques.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;span class=&quot;missing wiki&quot;&gt;ShadowMap&lt;/span&gt;&lt;/strong&gt;.
&lt;ul&gt;
&lt;li&gt;This is the most frequently used option and most mature and stable implementation.&lt;/li&gt;
&lt;li&gt;It uses a fragment shader (osg::Shader).&lt;/li&gt;
&lt;li&gt;It basically does a render to texture from the light source's point of view (which is the so-called shadow map) and then, when rendering the final scene, checks the fragment's depth against the shadow map to decide whether it is in shadow or not. It works whether you have shader support or not, but the shadows will be opaque black when using the fixed pipeline (ATI cards have an extension to control this, but it is not standard). Also, some older cards have very poor render-to-texture performance (whether FBO or pbuffer) so you should turn off shadows completely in that case.&lt;/li&gt;
&lt;li&gt;Option AmbientBias, see below.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;span class=&quot;missing wiki&quot;&gt;ShadowVolume&lt;/span&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;As of OSG 2.4, this is still experimental and may not produce shadows on some graphics cards. (JSG - in fact, I have not seen it work correctly at all, there are always inverted shadows where two shadows overlap)&lt;/li&gt;
&lt;li&gt;This technique does not use either texturing or shaders. It does make heavy use of stencils.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;span class=&quot;missing wiki&quot;&gt;ShadowTexture&lt;/span&gt;&lt;/strong&gt;.
&lt;ul&gt;
&lt;li&gt;This is the simplest technique. It does not use a shader.&lt;/li&gt;
&lt;li&gt;It's fixed-function only, so it should run on anything that supports RTT through either FBOs or pbuffers (so almost anything). One users reports: &quot;On my hardware (ATI mobility X300), only ShadowTexture works&quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;span class=&quot;missing wiki&quot;&gt;SoftShadowMap&lt;/span&gt;&lt;/strong&gt;.
&lt;ul&gt;
&lt;li&gt;As of OSG 2.4, this is still experimental and may not produce shadows on some graphics cards.&lt;/li&gt;
&lt;li&gt;It has quite complex shaders.&lt;/li&gt;
&lt;li&gt;The original idea for this technique was published in &lt;a class=&quot;ext-link&quot; href=&quot;http://developer.nvidia.com/object/gpu_gems_2_home.html&quot;&gt;&lt;span class=&quot;icon&quot;&gt;GPU Gems 2&lt;/span&gt;&lt;/a&gt; presumably the article &quot;Efficient Soft-Edged Shadows Using Pixel Shader Branching&quot;.&lt;/li&gt;
&lt;li&gt;Option AmbientBias, see below.&lt;/li&gt;
&lt;li&gt;Options Bias, SoftnessWidth, and JitteringScale are documented in the API docs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;span class=&quot;missing wiki&quot;&gt;ParallelSplitShadowMap&lt;/span&gt;&lt;/strong&gt;.
&lt;ul&gt;
&lt;li&gt;The idea for this technique is based on &lt;span class=&quot;ext-link&quot;&gt;&lt;span class=&quot;icon&quot;&gt;Parallel-split shadow maps for large-scale virtual environments&lt;/span&gt;&lt;/span&gt; or GPU Gems 3 / Chapter 10 &lt;a class=&quot;ext-link&quot; href=&quot;http://my.safaribooksonline.com/9780321545428/ch10&quot;&gt;&lt;span class=&quot;icon&quot;&gt;preview &lt;/span&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Instead of one single texture and it's discretisation bugs, this technique tries to reduce small shadow artifacts with upto 7 textures. Each shadow texture (depth map) has a camera distance range, in with the depth map will be active. In the active range, the shadow will be calculated based on the correct depth map. By default we assume that close points (near to the camera) should be more robust , less artefacts compared to far points. So we will split not linearly the viewing frustum. This technique should be quite similar to the Lispsm or view shadow map, if we use only one texture.&lt;/li&gt;
&lt;li&gt;This is the most complex and potentially powerful algorithm, with many more options that can be set:&lt;/li&gt;
&lt;li&gt;PolygonOffset&lt;/li&gt;
&lt;li&gt;MaxFarDistance : to reduce the shadowing artefacts and increase the frame rate you could define the range from camera to the distance where the shadow should disappear&lt;/li&gt;
&lt;li&gt;MoveVCamBehindRCamFactor : if you have need objects casting shadows behind the camera, may this option will solve some problems: it moves the camera virtually behind the real camera&lt;/li&gt;
&lt;li&gt;MinNearDistanceForSplits : put the light camera closer to scene (frustum split)&lt;/li&gt;
&lt;li&gt;forceFrontCullFace : activate front culling&lt;/li&gt;
&lt;li&gt;useLinearSplit : by default the splits are located non-linear, if you set the flag you will get linear distances between the textures, starting at the camera position to the farest frustum point&lt;/li&gt;
&lt;li&gt;If filtering is enabled (by default set) and GLSL is supported then the PSSM will filter the shadow with a 3x3 filter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;There is a method to activate a debug mode: It will display the active range of each texture (r=1,g=2,b=3,...)&lt;/li&gt;
&lt;li&gt;It still has some problems and will need some work before being production-ready.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Light space perspective shadow maps (Lispsm)&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To summarize:&lt;/p&gt;
&lt;table class=&quot;withborder&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Method&lt;/td&gt;
&lt;td&gt;uses textures&lt;/td&gt;
&lt;td&gt;uses osg::Shader&lt;/td&gt;
&lt;td&gt;respects CastsShadow&lt;/td&gt;
&lt;td&gt;respects ReceivesShadow&lt;/td&gt;
&lt;td&gt;notes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ShadowMap&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;Can work fixed-function too without any changes, just call clearShaderList() after init() but before first frame&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ShadowVolume&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;no?&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ShadowTexture&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;Can't do self-shadowing, so setting a node's CastsShadow bit means that node won't receive shadows.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SoftShadowMap&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ParallelSplitShadowMap&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;Filter3x3implementedinPSSM&quot;&gt;Filter 3x3 implemented in PSSM&lt;/h2&gt;
&lt;p&gt;Filter 3x3 Matrix:&lt;/p&gt;
&lt;table class=&quot;withborder&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Filter divisor: 6.0&lt;/p&gt;
&lt;table class=&quot;withborder&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;original&lt;/td&gt;
&lt;td&gt;filtered&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://www.openscenegraph.com/images/test.png&quot; border=&quot;0&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;https://www.openscenegraph.com/images/community/test_3x3.png&quot; border=&quot;0&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;AmbientBias&quot;&gt;Ambient Bias&lt;/h3&gt;
&lt;p&gt;The AmbientBias option on ShadowMap and SoftShadowMap is used to define how much shadows darken the scene. Its usually used to set up lower bound for shadowing factor, in the range [0..1]. If such shadow factor was used directly, shadowed areas would be completely black. Sometimes we want to make them to be only a bit darker than lit areas. By setting AmbientBias.x to some value from range 0..1 one limits minimal shadow value (hence AmbientBias because shadowed areas are lit only by ambient component). AmbientBias.y is usually set up to 1 - AmbientBias.x but it may be also set bit larger or smaller values used to make shadow range more dynamic or flat.&lt;/p&gt;
&lt;h3 id=&quot;TextureResolution&quot;&gt;Texture Resolution&lt;/h3&gt;
&lt;p&gt;Generally speaking, a projected texture is used to render the shadow. This means that if your shadow casting geometry is very large, then the texture resolution must be spread over a large area. This can produce blocky aliasing in the shadow. Therefore, it is advisable to keep the bounding sphere of your shadow casting geometry as small as possible. Just placing a ShadowedScene above a large scene graph, where everything casts a shadow, is not likely to produce good results. You should very deliberately choose which nodes will cast shadows.&lt;/p&gt;
&lt;p&gt;You can also increase the resolution of the texture with the &lt;span class=&quot;missing wiki&quot;&gt;ShadowTechnique&lt;/span&gt;'s &lt;em&gt;setTextureResolution&lt;/em&gt; method, but this is not a long term solution but rather just hides the problem. More advanced shadow techniques like PSSM (Parallel-Split Shadow Maps) or LiSPSM (Light-Space Perspective Shadow Maps) can help in those cases. (note: for now only PSSM is integrated into osgShadow and it does not work in all cases).&lt;/p&gt;
&lt;h2 id=&quot;ExampleCode&quot;&gt;Example Code&lt;/h2&gt;
&lt;p&gt;This code loads two cessnas, offset from each other. The first cessna casts a shadow on the second. In fact, because ShadowMap treats everything as shadowed, the first cessna also self-shadows.&lt;/p&gt;
&lt;pre&gt;  const int ReceivesShadowTraversalMask = 0x1;
  const int CastsShadowTraversalMask = 0x2;
  osg::ref_ptr shadowedScene = new osgShadow::ShadowedScene;

  shadowedScene-&amp;gt;setReceivesShadowTraversalMask(ReceivesShadowTraversalMask);
  shadowedScene-&amp;gt;setCastsShadowTraversalMask(CastsShadowTraversalMask);

  osg::ref_ptr sm = new osgShadow::ShadowMap;
  shadowedScene-&amp;gt;setShadowTechnique(sm.get());

  int mapres = 1024;
  sm-&amp;gt;setTextureSize(osg::Vec2s(mapres,mapres));

  osg::Group* cessna1 = (osg::Group*) osgDB::readNodeFile(&quot;cessna.osg&quot;);
  cessna1-&amp;gt;getChild(0)-&amp;gt;setNodeMask(CastsShadowTraversalMask);

  osg::Group* cessna2 = (osg::Group*) osgDB::readNodeFile(&quot;cessna.osg&quot;);
  cessna2-&amp;gt;getChild(0)-&amp;gt;setNodeMask(ReceivesShadowTraversalMask);

  osg::MatrixTransform* positioned = new osg::MatrixTransform;
  positioned-&amp;gt;setMatrix(osg::Matrix::translate(40,0,0));
  positioned-&amp;gt;addChild(cessna1);

  shadowedScene-&amp;gt;addChild(positioned);
  shadowedScene-&amp;gt;addChild(cessna2);
&lt;/pre&gt;
&lt;h2 id=&quot;CastsShadowandReceivesShadow&quot;&gt;CastsShadow and ReceivesShadow&lt;/h2&gt;
&lt;p&gt;The two ShadowedScene masks are there to help the ShadowTechnique implementations differentiate where appropriate between different types of objects in the scene - with some techniques like ShadowTexture this is essential, with others it doesn't make so much sense and actually can be rather awkward to implement. osgShadow library itself is also still quite young with the various implementations still not fully ground out, so some areas that they don't currently implement fully will hopefully be filled out in the future.&lt;/p&gt;
&lt;p&gt;For example, with OSG 2.4, ShadowMap respects the CastsShadow bit (only objects with that bit will casts a shadow) but ignores the ReceivesShadow bit (all objects in the shadow scene graph receive shadows - there are technical reasons for this).&lt;/p&gt;
&lt;p&gt;Keep in mind that the default node mask in OSG has all bits set: 0xffffffff. This means that every node under a ShadowedScene is set to both case and receive shadows, by default, unless you tell it otherwise. You should be careful when inserting a ShadowedScene into an existing application's scenegraph, as you might have a lot more objects casting shadows than you need, which can spread the shadow resolution very roughly. To solve the problem, disable casting by turning off the bit:&lt;/p&gt;
&lt;div class=&quot;code&quot;&gt;node-&amp;gt;setNodeMask(node-&amp;gt;getNodeMask() &amp;amp; ~CastsShadowTraversalMask);&lt;/div&gt;
&lt;h2 id=&quot;CommonQuestions&quot;&gt;Common Questions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Where in the scene graph does ShadowedScene go? Does it have to be at the root?
&lt;ul&gt;
&lt;li&gt;You can put your ShadowedScene node anywhere in the scene graph.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;What if the shadower and shadowed nodes are far apart in the scene graph, should the ShadowedScene be inserted above their mutual parent?
&lt;ul&gt;
&lt;li&gt;Yes. The root node of the subgraph which you want to have shadows should be an osgShadow::ShadowedScene&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Do the ReceivesShadow and CastsShadow mask bits need to be set to 0 for all the other nodes in the tree under ShadowedScene, to omit them from the shadow computation?
&lt;ul&gt;
&lt;li&gt;Yes. You will have to iterate through the entire scene graph to change the node mask for every node from its default (0xffffffff) to turn those bits off (use ~&lt;span class=&quot;ext-link&quot;&gt;&lt;span class=&quot;icon&quot;&gt;shadowedScene-&amp;gt;getCastsShadowTraversalMask()&lt;/span&gt;&lt;/span&gt; and ~&lt;span class=&quot;ext-link&quot;&gt;&lt;span class=&quot;icon&quot;&gt;getReceivesShadowTraversalMask()&lt;/span&gt;&lt;/span&gt; to toggle the right bits off - the tilde means logical NOT). However, remember that some shadow techniques will ignore some bits in some cases, so you may not be able to omit nodes in all cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Does the Light need to be present in the graph under the ShadowedScene?
&lt;ul&gt;
&lt;li&gt;No, you don't need to add light to shadowed scene nor it does not need to be present in fixed location in viewer scene hierarchy. In case of many lights, it would be helpful if you point out the Light source that must be used to generate shadows. See !ShadowMap::setLight function.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Does ShadowedScene always rerender the shadow every frame?
&lt;ul&gt;
&lt;li&gt;Yes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;If I know that the light and geometry are not moving, can I avoid the shadows being constantly re-rendered?
&lt;ul&gt;
&lt;li&gt;Possibly. See the mailing list thread &lt;span class=&quot;ext-link&quot;&gt;&lt;span class=&quot;icon&quot;&gt;osgShadow one shot shadow map&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;What if my objects already have a shader applied to them?
&lt;ul&gt;
&lt;li&gt;That shader also needs to implement shadow mapping. See &lt;a href=&quot;http://www.openscenegraph.org/projects/osg/browser/OpenSceneGraph/trunk/src/osgShadow/ShadowMap.cpp&quot;&gt;the top of src/osgShadow/ShadowMap.cpp&lt;/a&gt; for the basic shader, and use that in your shader (keep the same names for the variables too).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Can osgShadow be combined with osg::Fog?
&lt;ul&gt;
&lt;li&gt;Most of the ShadowTechniques use shaders. osg::Fog wraps up glFog, which is part of OpenGL's fixed pipeline. As soon as you enable shaders you lose the fixed pipeline functionality for that stage (vertex and/or fragment) and must implement the features you want yourself in the shader.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Exampleosgshadow&quot;&gt;Example osgshadow&lt;/h2&gt;
&lt;p&gt;The OSG examples include an application called osgshadow, which gives a very simple demonstration of how to call the osgShadow nodekit.&lt;/p&gt;
&lt;/div&gt;</content>
		<category term="Programming Guides" />
	</entry>
	<entry>
		<title>KdTrees </title>
		<link rel="alternate" type="text/html" href="https://www.openscenegraph.com/index.php/documentation/guides/programming-guides/107-kdtrees"/>
		<published>2013-02-06T01:47:20+00:00</published>
		<updated>2013-02-06T01:47:20+00:00</updated>
		<id>https://www.openscenegraph.com/index.php/documentation/guides/programming-guides/107-kdtrees</id>
		<author>
			<name>openscenegraph</name>
			<email>jtorresfabra@gmail.com</email>
		</author>
		<summary type="html">&lt;div id=&quot;content&quot; class=&quot;wiki&quot;&gt;
&lt;h2 class=&quot;wikipage searchable&quot;&gt;Design&lt;/h2&gt;
&lt;p&gt;The include/osg/KdTree header contains osg::KdTree and osg::KdTreeBuilder.&lt;/p&gt;
&lt;p&gt;The osg::KdTree class is subclassed osg::Shape, and is designed to be attached to osg::Geometry leaves. There are two key methods in KdTree:&lt;/p&gt;
&lt;pre class=&quot;wiki&quot;&gt;/** Build the kdtree from the specified source geometry object.
 * retun true on success. */
virtual bool build(BuildOptions&amp;amp; buildOptions, osg::Geometry* geometry);
&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;pre class=&quot;wiki&quot;&gt;/** compute the intersection of a line segment and the kdtree, return true if an intersection has been found.*/
virtual bool intersect(const osg::Vec3&amp;amp; start, const osg::Vec3&amp;amp; end, LineSegmentIntersections&amp;amp; intersections) const;
&lt;/pre&gt;
&lt;p&gt;Note, both these are virtual so if you want to create your own custom way of building &lt;span class=&quot;missing wiki&quot;&gt;KdTree&lt;/span&gt;'s or intersecting &lt;span class=&quot;missing wiki&quot;&gt;KdTree&lt;/span&gt;'s then you go ahead and implement your own methods.&lt;/p&gt;
&lt;p&gt;A companion class KdTreeBuilder is a NodeVisitor that has a prototype osg::KdTree that it clones each time it encounters an osg::Geometry, it then calls kdTree-&amp;gt;build(..) on this clone, if a valid KdTree is built then it'll assign to KdTree to the geometry via geometry-&amp;gt;setShape(kdTree). The use of the prototype allows you to provide your own subclasses from KdTree so that we KdTree's are built then automatically use your version.&lt;/p&gt;
&lt;h2 id=&quot;Usage&quot;&gt;Usage&lt;/h2&gt;
&lt;p&gt;To enable automatic generation of KdTree's osgDB was extended so that the Registry and DatabasePager are both KdTree aware, and if KdTree build option is enabled it'll use the Registry's new KdTreeBuilder object to build &lt;span class=&quot;missing wiki&quot;&gt;KdTree&lt;/span&gt;'s on loaded models. To enable this building you simple set the env var OSG_BUILD_KDTREES to on, i.e.&lt;/p&gt;
&lt;pre class=&quot;wiki&quot;&gt;set OSG_BUILD_KDTREES=on
osgpick cow.osg
&lt;/pre&gt;
&lt;p&gt;Or programatically you can enable building of KdTrees via:&lt;/p&gt;
&lt;pre class=&quot;wiki&quot;&gt;osgDB::Registry::instance()-&amp;gt;setBuildKdTreesHint(osgDB::ReaderWriter::Options::BUILD_KDTREES);
&lt;/pre&gt;
&lt;p&gt;You'll need to call this before you load any models that you wish to have BUILD_KDTREES set. Another option is that you can control the building of KdTrees per file load via the !ReaderWriter::Options object, that now has the enum and set/get pair:&lt;/p&gt;
&lt;pre class=&quot;wiki&quot;&gt;/// range of options of whether to build kdtrees automatically on loading
enum BuildKdTreesHint
{
   NO_PREFERENCE,
   DO_NOT_BUILD_KDTREES,
   BUILD_KDTREES
};

/** Set whether the KdTrees should be built for geometry in the loader model. */
void setBuildKdTreesHint(BuildKdTreesHint hint) { _buildKdTreesHint = hint; }

/** Get whether the KdTrees should be built for geometry in the loader model. */
BuildKdTreesHint getBuildKdTreesHint() const { return _buildKdTreesHint; }
&lt;/pre&gt;
&lt;p&gt;The !ReaderWriter::Options overrides what is set in osgDB::Registry when the hint is set to anything other than the default of NO_PREFERNCE.&lt;/p&gt;
&lt;p&gt;The osgDB::Registry::setBuildKdTreesHint() default value is also NO_PREFERNCE.&lt;/p&gt;
&lt;p&gt;In terms of intersection traversals, the osgUtil::IntersectionVisitor / LineSegmentIntersector now both have KdTree support built into them, and by default they will use any Geometries KdTree for intersection if one is available. This means if you are already using IntersectionVisitor/LineSegmentIntersector then you'll automatically have support, and you won't need to do any further code changes - just recompile the OSG and your app and you'll have it all there.&lt;/p&gt;
&lt;p&gt;For help with testing KdTree during intersections there exists an optional pair of methods in the IntersectionVisitor:&lt;/p&gt;
&lt;pre class=&quot;wiki&quot;&gt;/** Set whether the intersectors should use KdTrees when they are found on the scene graph.*/
void setUseKdTreeWhenAvailable(bool useKdTrees) { _useKdTreesWhenAvailable = useKdTrees; }

/** Set whether the intersectors should use KdTrees.*/
bool getUseKdTreeWhenAvailable() const { return _useKdTreesWhenAvailable; }
&lt;/pre&gt;
&lt;h2 id=&quot;Performance&quot;&gt;Performance&lt;/h2&gt;
&lt;p&gt;So what of the performance of building KdTree and intersecting with them?&lt;/p&gt;
&lt;p&gt;Building is pretty fast, for most models it'll be just ms to build, for big models it might be 10's of milliseconds. The speed of building allows us to use when paging data in without any noticeable hit - especially as the build is done by the paging thread, not the main thread or rendering threads.&lt;/p&gt;
&lt;p&gt;Intersecting performance improvement varies a lot - from just a couple times faster on some models/intersection tests through to 3000x faster with polygon rich models and certain ray test. For the whole earth models I've been doing a lot of testing against the typical performance delta is 5 to 40x the speed of the old intersection routines.&lt;/p&gt;
&lt;p&gt;The reason for much of the variation is the effect of the IntersectionVisitor traversal - if the scene graph is large and complex then the traversal time can easily swamp the cost of the KdTree intersections. Just creating the intersection data containers that record the intersections for the user are relatively expensive compared to the cost of KdTree traversal - the KdTree traversal is just so darn fast that everything else the IntersectionVisitor does it slow in comparison!&lt;/p&gt;
&lt;p&gt;What this means is that spending more time on optimizing the KdTree build and intersect methods is probably not worth it right now, rather it's high level management of how you set up the intersections calls the KdTree that needs to be carefully managed if you want to get maximum performance. For most users this probably won't be necessary, the performance boost from the existing IntersectionVisitor when using KdTree will be sufficient.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;</summary>
		<content type="html">&lt;div id=&quot;content&quot; class=&quot;wiki&quot;&gt;
&lt;h2 class=&quot;wikipage searchable&quot;&gt;Design&lt;/h2&gt;
&lt;p&gt;The include/osg/KdTree header contains osg::KdTree and osg::KdTreeBuilder.&lt;/p&gt;
&lt;p&gt;The osg::KdTree class is subclassed osg::Shape, and is designed to be attached to osg::Geometry leaves. There are two key methods in KdTree:&lt;/p&gt;
&lt;pre class=&quot;wiki&quot;&gt;/** Build the kdtree from the specified source geometry object.
 * retun true on success. */
virtual bool build(BuildOptions&amp;amp; buildOptions, osg::Geometry* geometry);
&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;pre class=&quot;wiki&quot;&gt;/** compute the intersection of a line segment and the kdtree, return true if an intersection has been found.*/
virtual bool intersect(const osg::Vec3&amp;amp; start, const osg::Vec3&amp;amp; end, LineSegmentIntersections&amp;amp; intersections) const;
&lt;/pre&gt;
&lt;p&gt;Note, both these are virtual so if you want to create your own custom way of building &lt;span class=&quot;missing wiki&quot;&gt;KdTree&lt;/span&gt;'s or intersecting &lt;span class=&quot;missing wiki&quot;&gt;KdTree&lt;/span&gt;'s then you go ahead and implement your own methods.&lt;/p&gt;
&lt;p&gt;A companion class KdTreeBuilder is a NodeVisitor that has a prototype osg::KdTree that it clones each time it encounters an osg::Geometry, it then calls kdTree-&amp;gt;build(..) on this clone, if a valid KdTree is built then it'll assign to KdTree to the geometry via geometry-&amp;gt;setShape(kdTree). The use of the prototype allows you to provide your own subclasses from KdTree so that we KdTree's are built then automatically use your version.&lt;/p&gt;
&lt;h2 id=&quot;Usage&quot;&gt;Usage&lt;/h2&gt;
&lt;p&gt;To enable automatic generation of KdTree's osgDB was extended so that the Registry and DatabasePager are both KdTree aware, and if KdTree build option is enabled it'll use the Registry's new KdTreeBuilder object to build &lt;span class=&quot;missing wiki&quot;&gt;KdTree&lt;/span&gt;'s on loaded models. To enable this building you simple set the env var OSG_BUILD_KDTREES to on, i.e.&lt;/p&gt;
&lt;pre class=&quot;wiki&quot;&gt;set OSG_BUILD_KDTREES=on
osgpick cow.osg
&lt;/pre&gt;
&lt;p&gt;Or programatically you can enable building of KdTrees via:&lt;/p&gt;
&lt;pre class=&quot;wiki&quot;&gt;osgDB::Registry::instance()-&amp;gt;setBuildKdTreesHint(osgDB::ReaderWriter::Options::BUILD_KDTREES);
&lt;/pre&gt;
&lt;p&gt;You'll need to call this before you load any models that you wish to have BUILD_KDTREES set. Another option is that you can control the building of KdTrees per file load via the !ReaderWriter::Options object, that now has the enum and set/get pair:&lt;/p&gt;
&lt;pre class=&quot;wiki&quot;&gt;/// range of options of whether to build kdtrees automatically on loading
enum BuildKdTreesHint
{
   NO_PREFERENCE,
   DO_NOT_BUILD_KDTREES,
   BUILD_KDTREES
};

/** Set whether the KdTrees should be built for geometry in the loader model. */
void setBuildKdTreesHint(BuildKdTreesHint hint) { _buildKdTreesHint = hint; }

/** Get whether the KdTrees should be built for geometry in the loader model. */
BuildKdTreesHint getBuildKdTreesHint() const { return _buildKdTreesHint; }
&lt;/pre&gt;
&lt;p&gt;The !ReaderWriter::Options overrides what is set in osgDB::Registry when the hint is set to anything other than the default of NO_PREFERNCE.&lt;/p&gt;
&lt;p&gt;The osgDB::Registry::setBuildKdTreesHint() default value is also NO_PREFERNCE.&lt;/p&gt;
&lt;p&gt;In terms of intersection traversals, the osgUtil::IntersectionVisitor / LineSegmentIntersector now both have KdTree support built into them, and by default they will use any Geometries KdTree for intersection if one is available. This means if you are already using IntersectionVisitor/LineSegmentIntersector then you'll automatically have support, and you won't need to do any further code changes - just recompile the OSG and your app and you'll have it all there.&lt;/p&gt;
&lt;p&gt;For help with testing KdTree during intersections there exists an optional pair of methods in the IntersectionVisitor:&lt;/p&gt;
&lt;pre class=&quot;wiki&quot;&gt;/** Set whether the intersectors should use KdTrees when they are found on the scene graph.*/
void setUseKdTreeWhenAvailable(bool useKdTrees) { _useKdTreesWhenAvailable = useKdTrees; }

/** Set whether the intersectors should use KdTrees.*/
bool getUseKdTreeWhenAvailable() const { return _useKdTreesWhenAvailable; }
&lt;/pre&gt;
&lt;h2 id=&quot;Performance&quot;&gt;Performance&lt;/h2&gt;
&lt;p&gt;So what of the performance of building KdTree and intersecting with them?&lt;/p&gt;
&lt;p&gt;Building is pretty fast, for most models it'll be just ms to build, for big models it might be 10's of milliseconds. The speed of building allows us to use when paging data in without any noticeable hit - especially as the build is done by the paging thread, not the main thread or rendering threads.&lt;/p&gt;
&lt;p&gt;Intersecting performance improvement varies a lot - from just a couple times faster on some models/intersection tests through to 3000x faster with polygon rich models and certain ray test. For the whole earth models I've been doing a lot of testing against the typical performance delta is 5 to 40x the speed of the old intersection routines.&lt;/p&gt;
&lt;p&gt;The reason for much of the variation is the effect of the IntersectionVisitor traversal - if the scene graph is large and complex then the traversal time can easily swamp the cost of the KdTree intersections. Just creating the intersection data containers that record the intersections for the user are relatively expensive compared to the cost of KdTree traversal - the KdTree traversal is just so darn fast that everything else the IntersectionVisitor does it slow in comparison!&lt;/p&gt;
&lt;p&gt;What this means is that spending more time on optimizing the KdTree build and intersect methods is probably not worth it right now, rather it's high level management of how you set up the intersections calls the KdTree that needs to be carefully managed if you want to get maximum performance. For most users this probably won't be necessary, the performance boost from the existing IntersectionVisitor when using KdTree will be sufficient.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;</content>
		<category term="Programming Guides" />
	</entry>
	<entry>
		<title>Viewer vs CompositeViewer</title>
		<link rel="alternate" type="text/html" href="https://www.openscenegraph.com/index.php/documentation/guides/programming-guides/93-viewer-vs-compositeviewer"/>
		<published>2013-01-19T03:18:13+00:00</published>
		<updated>2013-01-19T03:18:13+00:00</updated>
		<id>https://www.openscenegraph.com/index.php/documentation/guides/programming-guides/93-viewer-vs-compositeviewer</id>
		<author>
			<name>openscenegraph</name>
			<email>jtorresfabra@gmail.com</email>
		</author>
		<summary type="html">&lt;p id=&quot;osgViewer::ViewervsosgViewer::CompositeViewer&quot;&gt;The goal of this page is to help you decide which viewer class to use in your projects.&lt;/p&gt;
&lt;h4 id=&quot;Classhierarchy&quot;&gt;Class hierarchy&lt;/h4&gt;
&lt;p&gt;It may be useful to compare the class diagrams of the two viewer classes. This points out the basic conceptual difference that osgViewer::Viewer &quot;is a&quot; osgViewer::View, whereas osgViewer::CompositeViewer &quot;has a&quot; list of osgViewer::Views. For a more detailed explanation, see &lt;a href=&quot;https://www.openscenegraph.com/index.php/documentation/knowledge-base/92-views-and-viewers&quot;&gt;Views and Viewers&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Conceptualdifference&quot;&gt;Conceptual difference&lt;/h2&gt;
&lt;h4 id=&quot;BasicExplanation&quot;&gt;Basic Explanation&lt;/h4&gt;
&lt;p&gt;&lt;a class=&quot;ext-link&quot; href=&quot;http://thread.gmane.org/gmane.comp.graphics.openscenegraph.user/23167/focus=23216&quot;&gt;&lt;span class=&quot;icon&quot;&gt;This post&lt;/span&gt;&lt;/a&gt; explains the conceptual differences between the two viewer classes.&lt;/p&gt;
&lt;p&gt;The guide on when to use &lt;a class=&quot;ext-link&quot; href=&quot;http://www.openscenegraph.org/documentation/OpenSceneGraphReferenceDocs/a01084.html&quot;&gt;&lt;span class=&quot;icon&quot;&gt;CompositeViewer&lt;/span&gt;&lt;/a&gt; or &lt;a class=&quot;ext-link&quot; href=&quot;http://www.openscenegraph.org/documentation/OpenSceneGraphReferenceDocs/a01820.html&quot;&gt;&lt;span class=&quot;icon&quot;&gt;Viewer&lt;/span&gt;&lt;/a&gt; comes down to both practicalities and conceptual sides, if you don't keep both the practicalities and concepts well in sync you'll find it hard to get working and had to understand and communicate with others.&lt;/p&gt;
&lt;p&gt;So lets start with the basic concept that both viewers share, the concept of the a &quot;View&quot;. The View corresponds to a view that you have physical world, such as when you look out of one or more windows of building. If you have just one window to look through then you have just one view, also if you have multiple windows then if you were to turn around to someone to explain when you see you'd talk about a single view - the fact that you have multiple windows becomes irrelevant its the view of the scene beyond that is framed by the windows that is important.&lt;/p&gt;
&lt;p&gt;The &lt;a class=&quot;ext-link&quot; href=&quot;http://www.openscenegraph.org/documentation/OpenSceneGraphReferenceDocs/a01818.html&quot;&gt;&lt;span class=&quot;icon&quot;&gt;osg::View&lt;/span&gt;&lt;/a&gt;/&lt;a class=&quot;ext-link&quot; href=&quot;http://www.openscenegraph.org/documentation/OpenSceneGraphReferenceDocs/a01817.html&quot;&gt;&lt;span class=&quot;icon&quot;&gt;osgViewer::View&lt;/span&gt;&lt;/a&gt; is exactly the same, its one view on one scene. The &quot;Scene&quot; here is the &lt;a class=&quot;ext-link&quot; href=&quot;http://www.openscenegraph.org/documentation/OpenSceneGraphReferenceDocs/a01470.html&quot;&gt;&lt;span class=&quot;icon&quot;&gt;osgViewer::Scene&lt;/span&gt;&lt;/a&gt; which wraps up the details for a single scene graph. The View can be made up of one bit - a single Camera assigned to a single Window, or multiple Camera's each with their own Windows. In both single and multiple camera cases the overall view is coordinated - for instance the view out of a car windows is all managed as a single over entity if the car turns then all the sub portions of the view change with it. Implementation wise this is where you have a master Camera that provides the overall view and projection matrix and slave cameras which have their own local offsets relative to this master Camera. For the simple single camera/window case the master Camera doesn't need any slaves to help out, so you just assign the window directly to the master.&lt;/p&gt;
&lt;p&gt;The are times when you want to mix this slave/master relationship up a little, but importantly for your own sanity you need to keep coming back to the concept that one View represents one physical view. The cases when you might find it useful to mix things up a little is when doing viewer level effects like distortion correction - here you have one coordinated View, but the rendering is actually done by multiple slave Cameras that are reletaive to the master that render to texture, the one or more other slave Camera(s) that effectively render the resultant texture(s) to graphics window applying their own effects/distortion along the way. This second set of slave Camera(s) neither share the master's view and projection matrices, nor the same scene graph - they have their own local scene graphs required for the sole purpose of doing the post rendering effects/distortion correction. Despite this extra internal complexity of how to render the view, its is still one logical view and at the application level one would want to control it as such and not have to worry about the fact their might be 7+ slave cameras under the hood. This is where the practicalities of the implementation and the concepts still hold together in step, so we know we are still on firm ground.&lt;/p&gt;
&lt;p&gt;The above might seem rather complicated to get your head around, but... much of it can be wrapped up and encapsulated nicely, either via plugins or methods like &lt;a class=&quot;ext-link&quot; href=&quot;http://www.openscenegraph.org/documentation/OpenSceneGraphReferenceDocs/a01817.html#a27&quot;&gt;&lt;span class=&quot;icon&quot;&gt;View::setUpViewAcrossAllScreens()&lt;/span&gt;&lt;/a&gt; or View::setUpViewFor3DSphericalDisplay() with support power walls and distorted corrected spherical displays respecitively, all the multiple camera/window setup is done for you. Internally osgViewer::Viewer/osgViewer::CompositeViewer will worry about all the cameras and windows and keep them in sync and threaded correctly.&lt;/p&gt;
&lt;p&gt;For a hemi-spherical display you could follow along the lines of View::setUpViewFor3DSphericalDisplay().&lt;/p&gt;
&lt;p&gt;OK. Lots of text just on View. Well it is the most important bit to understand, both implementation wise and conceptually. Once you've got your head around the above then its quite easy to go the next step which is to know when and where to use CompositeViewer or Viewer. Its simple, do you have a single view that you are trying to represent? If so then use Viewer as its &quot;is a&quot; single View, the fact that that this single view might take half a dozen cameras to realise it doesn't ever change that fact that is its just for creating a single view.&lt;/p&gt;
&lt;p&gt;This leaves the CompositeViewer, it &quot;has a&quot; list of one or more Views. Yes you can use it to do just one view, and it'll behave and perform just like the standard Viewer in this instance, but it's a bit more complicated to use as one has to access a list of View's just rather than just directly accessing a single view that you know is always there as in the case of Viewer. So if you have a single view just use Viewer, most users probably fit in this category. There are still lots of users that need more than just a single view, they want multiple viewpoints all looking on the same view such as in a CAD program, or a 3D scene and a map view, or the want to be able to load multiple models and control them all independently. For these applications having the ability to manage multiple Views on to on or more Scenes is very powerful. While it is more complex to manage than a single View(er) the complexity remains proportional to the problem in hand, in fact the practical implementation details remain in step with the conceptual problem you are solving, so again you know you are on the right track.&lt;/p&gt;
&lt;p&gt;There is also the functional differences, for example when setting a HUD displayed over a scene. Do you want separate event handling and camera manipulation on your HUD? If so then since these are manage per View then a &lt;a class=&quot;ext-link&quot; href=&quot;http://www.openscenegraph.org/documentation/OpenSceneGraphReferenceDocs/a01084.html&quot;&gt;&lt;span class=&quot;icon&quot;&gt;CompositeViewer&lt;/span&gt;&lt;/a&gt; is more appropriate. If however the HUD is largely passive then a slave camera in Viewer would be just fine.&lt;/p&gt;
&lt;h4 id=&quot;ShortAnalogy&quot;&gt;Short Analogy&lt;/h4&gt;
&lt;p&gt;In the same thread, Mike Weiblen and Robert tried to sum up with this &lt;a class=&quot;ext-link&quot; href=&quot;http://thread.gmane.org/gmane.comp.graphics.openscenegraph.user/23167/focus=23251&quot;&gt;&lt;span class=&quot;icon&quot;&gt;analogy&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On Jan 19, 2008 12:28 AM, Mike Weiblen &amp;lt;mweib...@…&amp;gt; wrote:&lt;/p&gt;
&lt;pre class=&quot;wiki&quot;&gt;1) an immersive car cockpit display: front windscreen, left/right side
windows, inside/outside rearview mirrors.
That indicates Viewer (even though the eye orientations are quiet
different, and also have some mirror flips)
&lt;/pre&gt;
&lt;p&gt;Yep spot on, a clear case of a single conceptual view, as well as all the contributing cameras sharing the scene and being relative to the view's master camera - so both a conceptual fit as well as implementation one.&lt;/p&gt;
&lt;pre class=&quot;wiki&quot;&gt;2) a 3rd-person stealth watching a UAV sensor platform: the UAV is
collecting sensor data from its viewpoint; an operator is watching the
UAV and a wireframe of its sensor volume sweeping the terrain.  That
indicates CompositeViewer (the scene database could be identical, but
the sensor wont see its wireframe nor the UAV)
&lt;/pre&gt;
&lt;p&gt;Yep spot on again, the viewer (the person the viewer as in the English language definition) has two views of a scene so conceptually we have two views of one scene, on the implementation side you'd want to control the viewpoint of these views separately as well as some of the state - so again both a good conceptual fit as well as an implementation one.&lt;/p&gt;
&lt;p&gt;Robert.&lt;/p&gt;
&lt;h2 id=&quot;Exampleusecases&quot;&gt;Example use cases&lt;/h2&gt;
&lt;p&gt;Please add to these categories to list your own experiences. The more use cases are listed the easier it will be to find something that matches what a particular user wants to do.&lt;/p&gt;
&lt;h4 id=&quot;osgViewer::Viewer&quot;&gt;osgViewer::Viewer&lt;/h4&gt;
&lt;h5 id=&quot;Applicationwithasinglewindowviewingasinglescene&quot;&gt;Application with a single window viewing a single scene&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;osgviewer when running on a single screen (OSG_SCREEN=0 for example) - set up using&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;wikipage searchable&quot;&gt;&lt;span class=&quot;ext-link&quot;&gt;&lt;span class=&quot;icon&quot;&gt;osgViewer::View::setUpViewOnSingleScreen(unsigned int screenNum = 0)&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;h5 id=&quot;Applicationwithasinglescenebutviewedfrommultipleanglesusingslavecameras&quot;&gt;Application with a single scene, but viewed from multiple angles (using slave cameras)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;osgviewer when running on all screens (the default if you have multiple displays) - set up using&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;wikipage searchable&quot;&gt;&lt;span class=&quot;ext-link&quot;&gt;&lt;span class=&quot;icon&quot;&gt;osgViewer::View::setUpViewAcrossAllScreens()&lt;/span&gt;&lt;/span&gt;.&lt;/pre&gt;
&lt;h4 id=&quot;osgViewer::CompositeViewer&quot;&gt;osgViewer::CompositeViewer&lt;/h4&gt;
&lt;h5 id=&quot;Applicationwithmultiplescenes&quot;&gt;Application with multiple scenes&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;3D view along with a map or a radar/sonar view&lt;/li&gt;
&lt;/ul&gt;</summary>
		<content type="html">&lt;p id=&quot;osgViewer::ViewervsosgViewer::CompositeViewer&quot;&gt;The goal of this page is to help you decide which viewer class to use in your projects.&lt;/p&gt;
&lt;h4 id=&quot;Classhierarchy&quot;&gt;Class hierarchy&lt;/h4&gt;
&lt;p&gt;It may be useful to compare the class diagrams of the two viewer classes. This points out the basic conceptual difference that osgViewer::Viewer &quot;is a&quot; osgViewer::View, whereas osgViewer::CompositeViewer &quot;has a&quot; list of osgViewer::Views. For a more detailed explanation, see &lt;a href=&quot;https://www.openscenegraph.com/index.php/documentation/knowledge-base/92-views-and-viewers&quot;&gt;Views and Viewers&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Conceptualdifference&quot;&gt;Conceptual difference&lt;/h2&gt;
&lt;h4 id=&quot;BasicExplanation&quot;&gt;Basic Explanation&lt;/h4&gt;
&lt;p&gt;&lt;a class=&quot;ext-link&quot; href=&quot;http://thread.gmane.org/gmane.comp.graphics.openscenegraph.user/23167/focus=23216&quot;&gt;&lt;span class=&quot;icon&quot;&gt;This post&lt;/span&gt;&lt;/a&gt; explains the conceptual differences between the two viewer classes.&lt;/p&gt;
&lt;p&gt;The guide on when to use &lt;a class=&quot;ext-link&quot; href=&quot;http://www.openscenegraph.org/documentation/OpenSceneGraphReferenceDocs/a01084.html&quot;&gt;&lt;span class=&quot;icon&quot;&gt;CompositeViewer&lt;/span&gt;&lt;/a&gt; or &lt;a class=&quot;ext-link&quot; href=&quot;http://www.openscenegraph.org/documentation/OpenSceneGraphReferenceDocs/a01820.html&quot;&gt;&lt;span class=&quot;icon&quot;&gt;Viewer&lt;/span&gt;&lt;/a&gt; comes down to both practicalities and conceptual sides, if you don't keep both the practicalities and concepts well in sync you'll find it hard to get working and had to understand and communicate with others.&lt;/p&gt;
&lt;p&gt;So lets start with the basic concept that both viewers share, the concept of the a &quot;View&quot;. The View corresponds to a view that you have physical world, such as when you look out of one or more windows of building. If you have just one window to look through then you have just one view, also if you have multiple windows then if you were to turn around to someone to explain when you see you'd talk about a single view - the fact that you have multiple windows becomes irrelevant its the view of the scene beyond that is framed by the windows that is important.&lt;/p&gt;
&lt;p&gt;The &lt;a class=&quot;ext-link&quot; href=&quot;http://www.openscenegraph.org/documentation/OpenSceneGraphReferenceDocs/a01818.html&quot;&gt;&lt;span class=&quot;icon&quot;&gt;osg::View&lt;/span&gt;&lt;/a&gt;/&lt;a class=&quot;ext-link&quot; href=&quot;http://www.openscenegraph.org/documentation/OpenSceneGraphReferenceDocs/a01817.html&quot;&gt;&lt;span class=&quot;icon&quot;&gt;osgViewer::View&lt;/span&gt;&lt;/a&gt; is exactly the same, its one view on one scene. The &quot;Scene&quot; here is the &lt;a class=&quot;ext-link&quot; href=&quot;http://www.openscenegraph.org/documentation/OpenSceneGraphReferenceDocs/a01470.html&quot;&gt;&lt;span class=&quot;icon&quot;&gt;osgViewer::Scene&lt;/span&gt;&lt;/a&gt; which wraps up the details for a single scene graph. The View can be made up of one bit - a single Camera assigned to a single Window, or multiple Camera's each with their own Windows. In both single and multiple camera cases the overall view is coordinated - for instance the view out of a car windows is all managed as a single over entity if the car turns then all the sub portions of the view change with it. Implementation wise this is where you have a master Camera that provides the overall view and projection matrix and slave cameras which have their own local offsets relative to this master Camera. For the simple single camera/window case the master Camera doesn't need any slaves to help out, so you just assign the window directly to the master.&lt;/p&gt;
&lt;p&gt;The are times when you want to mix this slave/master relationship up a little, but importantly for your own sanity you need to keep coming back to the concept that one View represents one physical view. The cases when you might find it useful to mix things up a little is when doing viewer level effects like distortion correction - here you have one coordinated View, but the rendering is actually done by multiple slave Cameras that are reletaive to the master that render to texture, the one or more other slave Camera(s) that effectively render the resultant texture(s) to graphics window applying their own effects/distortion along the way. This second set of slave Camera(s) neither share the master's view and projection matrices, nor the same scene graph - they have their own local scene graphs required for the sole purpose of doing the post rendering effects/distortion correction. Despite this extra internal complexity of how to render the view, its is still one logical view and at the application level one would want to control it as such and not have to worry about the fact their might be 7+ slave cameras under the hood. This is where the practicalities of the implementation and the concepts still hold together in step, so we know we are still on firm ground.&lt;/p&gt;
&lt;p&gt;The above might seem rather complicated to get your head around, but... much of it can be wrapped up and encapsulated nicely, either via plugins or methods like &lt;a class=&quot;ext-link&quot; href=&quot;http://www.openscenegraph.org/documentation/OpenSceneGraphReferenceDocs/a01817.html#a27&quot;&gt;&lt;span class=&quot;icon&quot;&gt;View::setUpViewAcrossAllScreens()&lt;/span&gt;&lt;/a&gt; or View::setUpViewFor3DSphericalDisplay() with support power walls and distorted corrected spherical displays respecitively, all the multiple camera/window setup is done for you. Internally osgViewer::Viewer/osgViewer::CompositeViewer will worry about all the cameras and windows and keep them in sync and threaded correctly.&lt;/p&gt;
&lt;p&gt;For a hemi-spherical display you could follow along the lines of View::setUpViewFor3DSphericalDisplay().&lt;/p&gt;
&lt;p&gt;OK. Lots of text just on View. Well it is the most important bit to understand, both implementation wise and conceptually. Once you've got your head around the above then its quite easy to go the next step which is to know when and where to use CompositeViewer or Viewer. Its simple, do you have a single view that you are trying to represent? If so then use Viewer as its &quot;is a&quot; single View, the fact that that this single view might take half a dozen cameras to realise it doesn't ever change that fact that is its just for creating a single view.&lt;/p&gt;
&lt;p&gt;This leaves the CompositeViewer, it &quot;has a&quot; list of one or more Views. Yes you can use it to do just one view, and it'll behave and perform just like the standard Viewer in this instance, but it's a bit more complicated to use as one has to access a list of View's just rather than just directly accessing a single view that you know is always there as in the case of Viewer. So if you have a single view just use Viewer, most users probably fit in this category. There are still lots of users that need more than just a single view, they want multiple viewpoints all looking on the same view such as in a CAD program, or a 3D scene and a map view, or the want to be able to load multiple models and control them all independently. For these applications having the ability to manage multiple Views on to on or more Scenes is very powerful. While it is more complex to manage than a single View(er) the complexity remains proportional to the problem in hand, in fact the practical implementation details remain in step with the conceptual problem you are solving, so again you know you are on the right track.&lt;/p&gt;
&lt;p&gt;There is also the functional differences, for example when setting a HUD displayed over a scene. Do you want separate event handling and camera manipulation on your HUD? If so then since these are manage per View then a &lt;a class=&quot;ext-link&quot; href=&quot;http://www.openscenegraph.org/documentation/OpenSceneGraphReferenceDocs/a01084.html&quot;&gt;&lt;span class=&quot;icon&quot;&gt;CompositeViewer&lt;/span&gt;&lt;/a&gt; is more appropriate. If however the HUD is largely passive then a slave camera in Viewer would be just fine.&lt;/p&gt;
&lt;h4 id=&quot;ShortAnalogy&quot;&gt;Short Analogy&lt;/h4&gt;
&lt;p&gt;In the same thread, Mike Weiblen and Robert tried to sum up with this &lt;a class=&quot;ext-link&quot; href=&quot;http://thread.gmane.org/gmane.comp.graphics.openscenegraph.user/23167/focus=23251&quot;&gt;&lt;span class=&quot;icon&quot;&gt;analogy&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On Jan 19, 2008 12:28 AM, Mike Weiblen &amp;lt;mweib...@…&amp;gt; wrote:&lt;/p&gt;
&lt;pre class=&quot;wiki&quot;&gt;1) an immersive car cockpit display: front windscreen, left/right side
windows, inside/outside rearview mirrors.
That indicates Viewer (even though the eye orientations are quiet
different, and also have some mirror flips)
&lt;/pre&gt;
&lt;p&gt;Yep spot on, a clear case of a single conceptual view, as well as all the contributing cameras sharing the scene and being relative to the view's master camera - so both a conceptual fit as well as implementation one.&lt;/p&gt;
&lt;pre class=&quot;wiki&quot;&gt;2) a 3rd-person stealth watching a UAV sensor platform: the UAV is
collecting sensor data from its viewpoint; an operator is watching the
UAV and a wireframe of its sensor volume sweeping the terrain.  That
indicates CompositeViewer (the scene database could be identical, but
the sensor wont see its wireframe nor the UAV)
&lt;/pre&gt;
&lt;p&gt;Yep spot on again, the viewer (the person the viewer as in the English language definition) has two views of a scene so conceptually we have two views of one scene, on the implementation side you'd want to control the viewpoint of these views separately as well as some of the state - so again both a good conceptual fit as well as an implementation one.&lt;/p&gt;
&lt;p&gt;Robert.&lt;/p&gt;
&lt;h2 id=&quot;Exampleusecases&quot;&gt;Example use cases&lt;/h2&gt;
&lt;p&gt;Please add to these categories to list your own experiences. The more use cases are listed the easier it will be to find something that matches what a particular user wants to do.&lt;/p&gt;
&lt;h4 id=&quot;osgViewer::Viewer&quot;&gt;osgViewer::Viewer&lt;/h4&gt;
&lt;h5 id=&quot;Applicationwithasinglewindowviewingasinglescene&quot;&gt;Application with a single window viewing a single scene&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;osgviewer when running on a single screen (OSG_SCREEN=0 for example) - set up using&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;wikipage searchable&quot;&gt;&lt;span class=&quot;ext-link&quot;&gt;&lt;span class=&quot;icon&quot;&gt;osgViewer::View::setUpViewOnSingleScreen(unsigned int screenNum = 0)&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;h5 id=&quot;Applicationwithasinglescenebutviewedfrommultipleanglesusingslavecameras&quot;&gt;Application with a single scene, but viewed from multiple angles (using slave cameras)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;osgviewer when running on all screens (the default if you have multiple displays) - set up using&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;wikipage searchable&quot;&gt;&lt;span class=&quot;ext-link&quot;&gt;&lt;span class=&quot;icon&quot;&gt;osgViewer::View::setUpViewAcrossAllScreens()&lt;/span&gt;&lt;/span&gt;.&lt;/pre&gt;
&lt;h4 id=&quot;osgViewer::CompositeViewer&quot;&gt;osgViewer::CompositeViewer&lt;/h4&gt;
&lt;h5 id=&quot;Applicationwithmultiplescenes&quot;&gt;Application with multiple scenes&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;3D view along with a map or a radar/sonar view&lt;/li&gt;
&lt;/ul&gt;</content>
		<category term="Programming Guides" />
	</entry>
</feed>
